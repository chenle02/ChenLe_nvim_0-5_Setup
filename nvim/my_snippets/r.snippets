priority -20

global !p
import os
from vimsnippets import complete
FIELD_TYPES = [
'character',
'data.frame',
'integer',
'list',
'logical',
'matrix',
'numeric',
'vector']
endglobal

#{{{ #! "#!/usr/bin/env Rscript" b
snippet #! "#!/usr/bin/env Rscript" b
#!/usr/bin/env Rscript
library("colorout")  # This is for colored output from the terminal
$0
endsnippet
# }}}
# {{{ setwd "Set workingdir" b
snippet setwd "Set workingdir" b
setwd("${1:`!p snip.rv = os.getcwd()`}")
endsnippet
# }}}
# {{{ as "Apply type on variable" w
snippet as "Apply type on variable" w
as.$1`!p snip.rv = complete(t[1], FIELD_TYPES)`($2${VISUAL})
endsnippet
# }}}
# {{{ is "Test type on variable" w
snippet is "Test type on variable" w
is.$1`!p snip.rv = complete(t[1], FIELD_TYPES)`($2${VISUAL})
endsnippet
# }}}
# {{{ dl "Download and install a package" b
snippet dl "Download and install a package" b
download.file("${1:${VISUAL:url to package}}", destfile = "${2:${1/.*\/(\S*)$/(?1:$1)/ga}}")
install.packages("$2", type = "source", repos = NULL)
library("${3:${2/^(\w+)_.*$/(?1:$1)/ga}}")
endsnippet
# }}}
# {{{ lib "Import a library"
snippet lib "Import a library"
library('${0:${VISUAL:package}}')
endsnippet
# }}}
# {{{ req "Require a file"
snippet req "Require a file"
require('${0:${VISUAL:package}}')
endsnippet
# }}}
# {{{ source "Source a file"
snippet source "Source a file"
source('${0:${VISUAL:file}}')
endsnippet
# }}}
# {{{ if "If statement"
snippet if "If statement"
if ($1) {
	${0:${VISUAL}}
}
endsnippet
# }}}
# {{{ eif "Else-If statement"
snippet eif "Else-If statement"
else if ($1) {
	${0:${VISUAL}}
}
endsnippet
# }}}
# {{{ el "Else statement"
snippet el "Else statement"
else {
	${0:${VISUAL}}
}
endsnippet
# }}}
# {{{ ife "if .. else"
snippet ife "if .. else"
if ($1) {
	${2:${VISUAL}}
} else {
	$0
}
endsnippet
# }}}
# {{{ wh "while loop"
snippet wh "while loop"
while($1) {
	${0:${VISUAL}}
}
endsnippet
# }}}
# {{{ for "for loop"
snippet for "for loop"
for (${1:item} in ${2:list}) {
	${0:${VISUAL}}
}
endsnippet
# }}}
# {{{ fun "Function definition"
snippet fun "Function definition"
${1:name} <- function ($2) {
	${0:${VISUAL}}
}
endsnippet
# }}}
# {{{ ret "Return call"
snippet ret "Return call"
return(${0:${VISUAL}})
endsnippet
# }}}
# {{{ df "Data frame"
snippet df "Data frame"
${1:name}[${2:rows}, ${0:cols}]
endsnippet
# }}}
# {{{ c "c function"
snippet c "c function"
c(${0:${VISUAL:items}})
endsnippet
# }}}
# {{{ li "list function"
snippet li "list function"
list(${0:${VISUAL:items}})
endsnippet
# }}}
# {{{ mat "matrix function"
snippet mat "matrix function"
matrix(${1:${VISUAL:data}}, nrow = ${2:rows}, ncol = ${0:cols})
endsnippet
# }}}
# {{{ apply "apply function"
snippet apply "apply function"
apply(${1:${VISUAL:array}}, ${2:margin}, ${0:function})
endsnippet
# }}}
# {{{ lapply "lapply function"
snippet lapply "lapply function"
lapply(${1:${VISUAL:list}}, ${0:function})
endsnippet
# }}}
# {{{ sapply "sapply function"
snippet sapply "sapply function"
sapply(${1:${VISUAL:list}}, ${0:function})
endsnippet
# }}}
# {{{ vapply "vapply function"
snippet vapply "vapply function"
vapply(${1:${VISUAL:list}}, ${2:function}, ${0:type})
endsnippet
# }}}
# {{{ mapply "mapply function"
snippet mapply "mapply function"
mapply(${1:${VISUAL:function}}, ${0:...})
endsnippet
# }}}
# {{{ tapply "tapply function"
snippet tapply "tapply function"
tapply(${1:${VISUAL:vector}}, ${2:index}, ${0:function})
endsnippet
# }}}
# {{{ rapply "rapply function"
snippet rapply "rapply function"
rapply(${1:${VISUAL:list}}, ${0:function})
endsnippet
# }}}
# {{{ pl "Plot function"
snippet pl "Plot function"
plot(${1:${VISUAL:x}}, ${0:y})
endsnippet
# }}}
# {{{ ggp "ggplot2 plot"
snippet ggp "ggplot2 plot"
ggplot(${1:${VISUAL:data}}, aes(${0:aesthetics}))
endsnippet
# }}}
# {{{ fis "Fisher test"
snippet fis "Fisher test"
fisher.test(${1:x}, ${0:y})
endsnippet
# }}}
# {{{ chi "Chi Squared test"
snippet chi "Chi Squared test"
chisq.test(${1:x}, ${0:y})
endsnippet
# }}}
# {{{ tt "t-test"
snippet tt "t-test"
t.test(${1:x}, ${0:y})
endsnippet
# }}}
# {{{ wil "Wilcox test"
snippet wil "Wilcox test"
wilcox.test(${1:x}, ${0:y})
endsnippet
# }}}
# {{{ cor "Correlation test"
snippet cor "Correlation test"
cor.test(${1:x}, ${0:y})
endsnippet
# }}}
# {{{ fte "FTE test"
snippet fte "FTE test"
var.test(${1:x}, ${0:y})
endsnippet
# }}}
# {{{ kvt "KV test"
snippet kvt "KV test"
kv.test(${1:x}, ${0:y})
endsnippet
# }}}
#################################
#  easily create string vector  #
#################################
# Given individual words separated by spaces
# Select words (e.g. shift-v for whole line (such as the line above)
# then press <Tab> then type "vec", press <Tab> again to get this:
# var <- c("#","Given","individual","words","separated","by","spaces")
# var <- c("#","type","out","individual","words","separated","by","spaces")
# {{{ vec
snippet vec
${1:var} <- c("${0:${VISUAL:/ /","/g}}")
endsnippet
# }}}

#################################
#  Le's own snippets
#################################
# {{{ setcolor "Start colorout for terminal output"
snippet setcolor "Start colorout for terminal output"
library("colorout")
endsnippet
# }}}

# vim:ft=snippets:
